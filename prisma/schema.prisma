generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./types" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  // createModelTypes                 = false // default is true
  // addInputTypeValidation           = false // default is true
  // addIncludeType                   = false // default is true
  // addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id    String @id @db.Uuid
  name  String @default("Anonymous") @db.Text
  email String @unique @db.Text
  role  Role   @default(user)

  subscriptions Subscription? // One-to-Many: A user can have multiple subscriptions
  services      Service? // One-to-One: A user can have one service

  @@map("profile")
}

model Service {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.Text
  date        DateTime @db.Timestamptz
  images      Json // Array of image URLs
  description String   @db.Text
  userId      String   @unique @db.Uuid
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("service")
}

model Subscription {
  id                  String             @id @default(uuid()) @db.Uuid
  start_date          DateTime           @db.Timestamptz
  expire_date         DateTime           @db.Timestamptz
  status_subscription SubscriptionStatus @default(EXPIRED)
  userId              String             @unique @db.Uuid
  user                Profile            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum Role {
  admin
  user
}
